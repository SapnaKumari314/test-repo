(***
@Author: Himaja R
@Date: 6/Jul/22
@TC_ID: TOUC_10672
@TC_Description: NTC073_Verify the csv exported for a Proterra Admin User for Asset Type Vehicle and Time Type Daily Intervals while using option Data fields & Explanations both radio button
@Modified Date:
***)

BeginTestCase TOUC_10672

Log "###########   Started execution of Test Case--> TOUC_10672   ##############"
Log "#######################################################"
--testdata

set Global ConfigValues to {MinTimeOut:"4",BasicTimeOut:"15",MediumTimeOut:"25",LongTimeOut:"35"}
--set TimeType to "DailyIntervals"
--set AssetType to "Vehicle"
set Global TimeZone to  "UTC"
set CSVFileName to "TOUC_10672"
set TestDataExcelFileName to "Vehicle.xlsx"
set ExcelSheetName to "DailyIntervals"
set ExcelColsExplainationSheetName to "DailyIntervalExplanations"

--To get response from Open Search
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
get OpenSearchDashboard.OpenApplication_OpenSearch 

get OpenSearchDashboard.OpenSearchLogin

put "Utilities/ExcelOperations".readTestDataFrom(Resourcepath("Vehicle.xlsx"), "DailyIntervals", "BusVIN") into  BusVIN
put "Utilities/ExcelOperations".readTestDataFrom(Resourcepath("Vehicle.xlsx"), "DailyIntervals", "EpochFromDate") into  From
put "Utilities/ExcelOperations".readTestDataFrom(Resourcepath("Vehicle.xlsx"), "DailyIntervals", "EpochToDate") into  To
put  "Handlers/VehicleDailyIntervals".VehicleDailyIntervalsQuery(BusVIN,From,To) into Query
put "Handlers/ReportHandlers".getTheResponseFromOpenSearchAndSave(Query,"TOUC_10672_Response") into Response


//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


get LoginPage.OpenApplication

--Step 1:
--Login as a Proterra Admin in Apex Portal
--Logged In successful to Apex Portal.
get LoginPage.Login

--Step 2:
--Under Historical Data on Left menu choose Reporting
--Reporting Dashboard Page Opens on Right
put ApexCommonHandlers.NavigateTo("Historical Data","Reporting") into ReturnVal
put "Handlers/ReportHandlers".VerifyReportingPageOpened into ReturnVal

--Step 3
--Select Customers, Asset Type As Vehicle, Asset IDs as Vehicle Names , Time Type as Daily Intervals , From Date and To Date
put  "Utilities/ExcelOperations".readColumDataFrom(Resourcepath("Vehicle.xlsx"), "DailyIntervals", "CustomersName") into Customers

//3.1To select customer
put "Handlers/ReportHandlers".SelectCustomer(Customers) into  ReturnVal 

//3.2 To select AssetType
set AssetType to "Vehicle"
put "Handlers/ReportHandlers".SelectAssetType(AssetType)

//3.3 To select Asset ID
put  "Utilities/ExcelOperations".readColumDataFrom(Resourcepath("Vehicle.xlsx"), "DailyIntervals", "AssetID") into AssetID
put "Handlers/ReportHandlers".SelectAssetID(AssetID) into  ReturnVal 


//3.4 To select time type
set TimeType to "Daily Intervals"
put "Handlers/ReportHandlers".SelectAndVerifyTimeType(TimeType) into  ReturnVal 

//3.5 To Select from date
put  "Utilities/ExcelOperations".readTestDataFrom(Resourcepath("Vehicle.xlsx"), "DailyIntervals", "FromDateDay") into FromDateDay
put  "Utilities/ExcelOperations".readTestDataFrom(Resourcepath("Vehicle.xlsx"), "DailyIntervals", "FromDateMon") into FromDateMon
put  "Utilities/ExcelOperations".readTestDataFrom(Resourcepath("Vehicle.xlsx"), "DailyIntervals", "FromDateYear") into FromDateYear
put "Handlers/ReportHandlers".SelectDateFromDatePickerWindow(FromDateDay,FromDateMon,FromDateYear,"From Date")

//3.6 To select To Date
put  "Utilities/ExcelOperations".readTestDataFrom(Resourcepath("Vehicle.xlsx"), "DailyIntervals", "ToDateDay") into ToDateDay
put  "Utilities/ExcelOperations".readTestDataFrom(Resourcepath("Vehicle.xlsx"), "DailyIntervals", "ToDateMon") into ToDateMon
put  "Utilities/ExcelOperations".readTestDataFrom(Resourcepath("Vehicle.xlsx"), "DailyIntervals", "ToDateYear") into ToDateYear
put "Handlers/ReportHandlers".SelectDateFromDatePickerWindow(ToDateDay,ToDateMon,ToDateYear,"To Date")


//To select all the data fileds
get  "Handlers/ReportHandlers".SelectAllDataFields


--Step 4:
--Click on the Export CSV button
--A Pop Up page appears with two radio buttons having a single select option, where user can choose from the valid options:
--> Both data columns and data column explanations
--or
--> Only data columns

--Step 5:
--Verify that by default Both data columns and data column explanations radio button is selected
--Verified that by default Both data columns and data column explanations radio button is selected

--Step 6:
--Click on Export Button
--Verify that a pop up message comes that Success : Your file [Asset Type][Time Type][ReportRunDateTime].CSV ( CSV name format ) is now processing
put "Handlers/ReportHandlers".VerifyExportCSVProcessingPopUp("Data fields and explanations","2.5","DailyIntervals",AssetType)


put "Handlers/ReportHandlers".ExportCSVAndReturnTimeStamp("Data fields and explanations","UTC") into TimeStampList



--Step 7:
--Wait for few minutes ( approx 1 minute ) and then Click on Downloads button
--Verify that we see the Downloaded file in browser to user in name format -
--[Asset Type][Time Type][ReportRunDateTime].CSV

get "Handlers/ReportHandlers".ClickAndVerifyDownloadsBtn

put "Handlers/VehicleDailyIntervals".validateFileDownloaded("Vehicle","Daily Intervals",TimeStampList) into TimeStamp

--Step 8:
--Verify the name format of downloaded CSV is correct
--Verified the name format of downloaded CSV is correct
//C:\Users\Rhimaja\Downloads\Vehicle_Aggregation_2022-07-04_18-01-05.csv
put "Handlers/FileOperations".VerifyAndOpenDownloadedFile("C:\Users\Rhimaja\Downloads\Vehicle_Daily Intervals_"&TimeStamp&".csv") into CSVDataToVerify

put "Handlers/FileOperations".createCSVFileAndWrite(CSVFileName,CSVDataToVerify)

--Step 9:
--Verify that downloaded CSV contains - columns explanations first and then column names as per Reporting Matrix
--Verified that downloaded CSV contains - columns explanations first and then column names as per Reporting Matrix
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Step 10:
--Verify that the exported data is sorted as per user filters chosen in drag and drop zone
--Verified that the exported data is sorted as per user filters chosen in drag and drop zone
put "Handlers/ReportHandlers".readAndVerifyDataFieldExplanations(CSVFileName,TestDataExcelFileName,ExcelColsExplainationSheetName)


--Step 11:
--Verify that for a range of dates user had selected a - Each day a different row is populated in the downloaded CSV
--Verified that for a range of dates user had selected a - Each day a different row is populated in the downloaded CSV


--12
--Verify the data accuracy of the column values in downloaded csv by comparing values obtained from open search against the indexes mentioned for Data Attributes Column in Reporting Matrix

--Verified the data accuracy of the column values in downloaded csv by comparing values obtained from open search against the indexes mentioned for Data Attributes Column in Reporting Matrix



//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX------TEST DATA------------XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

set JSONFileName to "TOUC_10672_Response"
set CSVFileName to "TOUC_10672"
put "Utilities/ExcelOperations".readTestDataFrom(Resourcepath("Vehicle.xlsx"), "DailyIntervals", "BusVIN") into  BusVIN
put "Handlers/FileOperations".ReadFromCSVFile(CSVFileName ) into CSVData
put "Handlers/FileOperations".getJSONValueFromJSONFile(JSONFileName) into Response
put  "Utilities/ExcelOperations".readTestDataFrom(Resourcepath("Vehicle.xlsx"), "DailyIntervals", "Metric") into Metric
//put "Handlers/ReportHandlers".getAllTheDatesBtwFromAndToDate("Vehicle.xlsx","DailyIntervals") into DateList
------------------------------------------Customer Name---------------------------------------------------------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

------------------------------------------Customer Vehicle Name---------------------------------------------------------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
get "Handlers/VehicleDailyIntervals".ValidateDataCorrectness(BusVIN,CSVData,Response,2,Metric,"getCustomerVehicleName","Customer Vehicle Name")

------------------------------------------Vehicle Identification Number---------------------------------------------------------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
get "Handlers/VehicleDailyIntervals".ValidateDataCorrectness(BusVIN,CSVData,Response,2,Metric,"getVehicleIdentificationNumber","Vehicle Identification Number")


------------------------------------------Odometer Value---------------------------------------------------------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

get "Handlers/VehicleDailyIntervals".ValidateDataCorrectness(BusVIN,CSVData,Response,2,Metric,"getOdometerValue","Odometer Value")


------------------------------------------Total Distance Driven---------------------------------------------------------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

get "Handlers/VehicleDailyIntervals".ValidateDataCorrectness(BusVIN,CSVData,Response,2,Metric,"getTotalDistanceDriven","Total Distance Driven")

------------------------------------------Battery State of Charge (%)---------------------------------------------------------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


get "Handlers/VehicleDailyIntervals".ValidateDataCorrectness(BusVIN,CSVData,Response,2,Metric,"getBatteryStateofCharge","Battery State of Charge (%)")

------------------------------------------Total Gross Energy Consumed (kWh)---------------------------------------------------------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX



get "Handlers/VehicleDailyIntervals".ValidateDataCorrectness(BusVIN,CSVData,Response,2,Metric,"getTotalGrossEnergyConsumedkWh","Total Gross Energy Consumed (kWh)")


-------------------------------------------------Total Energy Saved by Regenerative Braking (kWh)---------------------------------------------------------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


get "Handlers/VehicleDailyIntervals".ValidateDataCorrectness(BusVIN,CSVData,Response,2,Metric,"getTotalEnergySavedbyRegenerativeBrakingkWh","Total Energy Saved by Regenerative Braking (kWh)")
--------------------------------------------------------Net Energy Consumed (kWh)---------------------------------------------------------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


get "Handlers/VehicleDailyIntervals".ValidateDataCorrectness(BusVIN,CSVData,Response,2,Metric,"getNetEnergyConsumedkWh","Net Energy Consumed (kWh)")

--------------------------------------------------------Efficiency (Distance driven per kWh)---------------------------------------------------------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

get "Handlers/VehicleDailyIntervals".ValidateDataCorrectness(BusVIN,CSVData,Response,2,Metric,"getEfficiencyDistancedrivenperkWh","Efficiency (Distance driven per kWh)")


--------------------------------------------------------Vehicle Status---------------------------------------------------------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
get "Handlers/VehicleDailyIntervals".ValidateDataCorrectness(BusVIN,CSVData,Response,2,Metric,"getVehicleStatus","Vehicle Status")


--------------------------------------------------------Maximum Ambient Temperature---------------------------------------------------------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
get "Handlers/VehicleDailyIntervals".ValidateDataCorrectness(BusVIN,CSVData,Response,2,Metric,"getMaximumAmbientTemperature","Maximum Ambient Temperature")

--------------------------------------------------------Minimum Ambient Temperature---------------------------------------------------------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

get "Handlers/VehicleDailyIntervals".ValidateDataCorrectness(BusVIN,CSVData,Response,2,Metric,"getMinimumAmbientTemperature","Minimum Ambient Temperature")


--------------------------------------------------------Cabin Temperature---------------------------------------------------------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

get "Handlers/VehicleDailyIntervals".ValidateDataCorrectness(BusVIN,CSVData,Response,2,Metric,"getCabinTemperature","Cabin Temperature")

--------------------------------------------------------Vehicle Model---------------------------------------------------------------------------------
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

get "Handlers/VehicleDailyIntervals".ValidateDataCorrectness(BusVIN,CSVData,Response,2,Metric,"getVehicleModel","Vehicle Model")

get "Handlers/ReportHandlers".CloseDownloadsWindow

LoginPage.Logout

//====================
Log "#############  Finished execution of Test Case--> TOUC_10672 ############"
Log "#######################################################"

EndTestCase TOUC_10672





(*put "Handlers/FileOperations".getJSONValueFromJSONFile(JSONFileName) into Response
put  "Handlers/VehicleDailyIntervals".getCustomerName(BusVIN,,Response) into OpenSearchCustomerName


put "Handlers/FileOperations".ReadFromCSVFile(CSVFileName ) into CSVData

put "Handlers/FileOperations".getColumnDataAsAListFromCSV ("Customer",2,CSVData) into CSVCustomerName
log OpenSearchCustomerName
log CSVCustomerName*)






